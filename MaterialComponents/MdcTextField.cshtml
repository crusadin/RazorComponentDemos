@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
    
<div ref="textFieldElem" class="mdc-text-field">
    <input type="text" id=@id class="mdc-text-field__input"
           value=@Text onchange=@HandleTextChanged />

    <label class="mdc-floating-label" for=@id>@Label</label>
    <div class="mdc-line-ripple"></div>
</div>

@functions {
    string id = Guid.NewGuid().ToString();

    [Parameter] string Label { get; set; }
    
    // The Prop+PropChanged pattern is what makes bind-Prop work
    [Parameter] string Text { get; set; }
    [Parameter] Action<string> TextChanged { get; set; }

    void HandleTextChanged(UIChangeEventArgs changeEvent)
    {
        Text = (string)changeEvent.Value;
        TextChanged?.Invoke(Text);
    }

    #region Wire up via JS interop
    ElementRef textFieldElem;
    bool isFirstRender = true;

    protected override async Task OnAfterRenderAsync()
    {
        if (isFirstRender)
        {
            isFirstRender = false;
            await jsRuntime.InvokeAsync<object>(
                "BlazorMaterial.textField.init", textFieldElem);
        }
    }
    #endregion
}
